---
# Variable setup.
- name: Include OS-Specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Define jenkins_repo_url
  set_fact:
    jenkins_repo_url: "{{ __jenkins_repo_url }}"
  when: jenkins_repo_url is not defined

- name: Define jenkins_repo_key_url
  set_fact:
    jenkins_repo_key_url: "{{ __jenkins_repo_key_url }}"
  when: jenkins_repo_key_url is not defined

# Setup/install tasks.
- include: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include: setup-Debian.yml
  when: ansible_os_family == 'Debian'

# Configure Jenkins init settings.
# pre-requisite: create $JENKINS_HOME/tmp
- name: create new tmp dir
  file:
    path: /var/lib/jenkins/tmp
    owner: jenkins
    group: jenkins
    mode: 0755
    state: directory

# Update system settings and start
- include: settings.yml

# Initialize default admin user(s)
- name: check if admin users are defined
  fail: msg="Please define at least one admin user for Jenkins in variable 'jenkins_admin_users'"
  when: jenkins_admin_users is not defined or jenkins_admin_users | length == 0

- include: users.yml jenkins_users="{{ jenkins_admin_users }}"

- include: users.yml jenkins_users="{{ jenkins_additional_users }}"
  when: jenkins_additional_users is defined and jenkins_additional_users | length > 0

# Make sure Jenkins starts, then configure Jenkins.
- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes

- include: check-availability.yml

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10

# Update Jenkins and install configured plugins.
- include: plugins.yml
